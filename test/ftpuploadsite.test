package require tcltest
package require -exact gen 1.8.0

namespace eval FtpUploadSiteTest {}


namespace eval FtpUploadSiteTest {

proc Setup {RemoteDirectoryName} {
     source ftp-test-config.tcl
     $GenTest::Ftp::ResetRemoteDirectoryCommandName $RemoteDirectoryName
     SaveWorkingDirectory
}

proc Test {LocalDirectoryName ExpectedRemoteDirectory} {
     set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/$LocalDirectoryName $GenTest::Ftp::RemoteRoot/uploadto/temp}]
     if {$Result == 0} {
          set Result [$GenTest::Ftp::DiffRemoteDirectoriesCommandName $ExpectedRemoteDirectory]
     }
     return $Result
}

}

proc FtpUploadSiteTest::Test-1 {} {

::tcltest::test FtpUploadSite-0 {Basic test}  -constraints {}  -setup {FtpUploadSiteTest::Setup one-file
}  -body {FtpUploadSiteTest::Test one-file FtpUploadSite/one-file
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-2 {} {

::tcltest::test FtpUploadSite-1 {Cannot connect to server}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Server 10.10.10.10
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-3 {} {

::tcltest::test FtpUploadSite-2 {Username invalid}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Username asdfqwersdfg
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-4 {} {

::tcltest::test FtpUploadSite-3 {Password invalid}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Password erfjwepoijaspdi
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-5 {} {

::tcltest::test FtpUploadSite-4 {Cannot switch to local directory}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenTest::Ftp::LocalRoot eporfjwepoijr
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-6 {} {

::tcltest::test FtpUploadSite-5 {Cannot switch to remote directory}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenTest::Ftp::RemoteRoot eporfjwepoijr
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-7 {} {

::tcltest::test FtpUploadSite-6 {Bad transfer type}  -constraints {}  -setup {source ftp-test-config.tcl
SaveWorkingDirectory
}  -body {set GenNS::Ftp::FileTransferType asdf
set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp/one-file}]
set Result [Flip $Result]
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-8 {} {

::tcltest::test FtpUploadSite-7 {Bad test}  -constraints {}  -setup {FtpUploadSiteTest::Setup empty
}  -body {set Result [catch {FtpUploadSite $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp}]
if {$Result == 0} {
     set Result [$GenTest::Ftp::DiffRemoteDirectoriesCommandName FtpUploadSite/empty]
}
set Result
}  -cleanup {RestoreWorkingDirectory
}  -result {1}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-9 {} {

::tcltest::test FtpUploadSite-8 {Dry run}  -constraints {}  -setup {}  -body {}  -cleanup {}  -result {}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-10 {} {

::tcltest::test FtpUploadSite-9 {Empty directory, nothing to upload}  -constraints {}  -setup {FtpUploadSiteTest::Setup empty}  -body {FtpUploadSiteTest::Test empty FtpUploadSite/empty
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-11 {} {

::tcltest::test FtpUploadSite-10 {Has unmatched files}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-unmatched-files
}  -body {FtpUploadSiteTest::Test one-file FtpUploadSite/has-unmatched-files
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-12 {} {

::tcltest::test FtpUploadSite-11 {Has unmatched directory}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-unmatched-subdir
}  -body {FtpUploadSiteTest::Test one-file FtpUploadSite/has-unmatched-subdir
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-13 {} {

::tcltest::test FtpUploadSite-12 {Has existing files with same name}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-one-file-already
}  -body {FtpUploadSiteTest::Test one-file FtpUploadSite/has-one-file-already
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-14 {} {

::tcltest::test FtpUploadSite-13 {Has existing directory with same name}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-subdir-already
}  -body {FtpUploadSiteTest::Test has-subdir FtpUploadSite/has-subdir-already
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-15 {} {

::tcltest::test FtpUploadSite-14 {Must create new directory}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-subdir
}  -body {FtpUploadSiteTest::Test has-subdir FtpUploadSite/has-subdir
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpUploadSiteTest::Test-16 {} {

::tcltest::test FtpUploadSite-15 {Has existing directory two levels deep}  -constraints {}  -setup {FtpUploadSiteTest::Setup has-subdir-two-levels
}  -body {FtpUploadSiteTest::Test has-subdir-two-levels FtpUploadSite/has-subdir-two-levels
}  -cleanup {RestoreWorkingDirectory
}  -result {0}  -output {}  -returnCodes {0}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     FtpUploadSiteTest::Test-1
     FtpUploadSiteTest::Test-2
     FtpUploadSiteTest::Test-3
     FtpUploadSiteTest::Test-4
     FtpUploadSiteTest::Test-5
     FtpUploadSiteTest::Test-6
     FtpUploadSiteTest::Test-7
     FtpUploadSiteTest::Test-8
     FtpUploadSiteTest::Test-9
     FtpUploadSiteTest::Test-10
     FtpUploadSiteTest::Test-11
     FtpUploadSiteTest::Test-12
     FtpUploadSiteTest::Test-13
     FtpUploadSiteTest::Test-14
     FtpUploadSiteTest::Test-15
     FtpUploadSiteTest::Test-16
} else {
     foreach Element [lrange $::argv 1 end] {
          FtpUploadSiteTest::Test-[set Element]
     }
}

