package require tcltest
package require -exact gen 1.14.0
source gen-test-common.tcl

namespace eval SqliteRenameColumnTest {}



proc SqliteRenameColumnTest::Test-1 {} {

::tcltest::test SqliteRenameColumn-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {sqlite3 testdb test.db
QQ {CREATE TABLE my_temp_table (id integer primary key, desc text)}
QQ {INSERT INTO my_temp_table (desc) VALUES ('one')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('two')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('three')}
}  -body {SqliteRenameColumn my_temp_table desc name
QQ "SELECT name FROM my_temp_table"
}  -cleanup {QQ {DROP TABLE my_temp_table}
}  -result {one two three}  -output {}  -returnCodes {0}  

}



proc SqliteRenameColumnTest::Test-2 {} {

::tcltest::test SqliteRenameColumn-1 {TableName is empty}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {}  -body {SqliteRenameColumn "" desc name
}  -cleanup {}  -result {Variable TableName has empty value.}  -output {}  -returnCodes {1}  

}



proc SqliteRenameColumnTest::Test-3 {} {

::tcltest::test SqliteRenameColumn-3 {OldColumnName is empty}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {}  -body {SqliteRenameColumn my_temp_table "" name
}  -cleanup {}  -result {Variable OldColumnName has empty value.}  -output {}  -returnCodes {1}  

}



proc SqliteRenameColumnTest::Test-4 {} {

::tcltest::test SqliteRenameColumn-4 {NewColumnName is empty}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {}  -body {SqliteRenameColumn my_temp_table desc ""
}  -cleanup {}  -result {Variable NewColumnName has empty value.}  -output {}  -returnCodes {1}  

}



proc SqliteRenameColumnTest::Test-5 {} {

::tcltest::test SqliteRenameColumn-5 {OldColumnName does not match column in table}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {sqlite3 testdb test.db
QQ {CREATE TABLE my_temp_table (id integer primary key, desc text)}
QQ {INSERT INTO my_temp_table (desc) VALUES ('one')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('two')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('three')}
}  -body {SqliteRenameColumn my_temp_table asdf name
}  -cleanup {QQ {DROP TABLE my_temp_table}
}  -result {Variable OldColumnName has invalid value asdf. No such column found.}  -output {}  -returnCodes {1}  

}



proc SqliteRenameColumnTest::Test-6 {} {

::tcltest::test SqliteRenameColumn-7 {There is already a column with that name.}  -constraints {[expr [CheckAllDependenciesLoaded SqliteRenameColumn]]}  -setup {sqlite3 testdb test.db
QQ {CREATE TABLE my_temp_table (id integer primary key, desc text)}
QQ {INSERT INTO my_temp_table (desc) VALUES ('one')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('two')}
QQ {INSERT INTO my_temp_table (desc) VALUES ('three')}
}  -body {SqliteRenameColumn my_temp_table desc desc
QQ "SELECT name FROM my_temp_table"
}  -cleanup {QQ {DROP TABLE my_temp_table}
}  -result {Variable NewColumnName has invalid value desc. A column with that name already exists.}  -output {}  -returnCodes {1}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     SqliteRenameColumnTest::Test-1
     SqliteRenameColumnTest::Test-2
     SqliteRenameColumnTest::Test-3
     SqliteRenameColumnTest::Test-4
     SqliteRenameColumnTest::Test-5
     SqliteRenameColumnTest::Test-6
} else {
     foreach Element [lrange $::argv 1 end] {
          SqliteRenameColumnTest::Test-[set Element]
     }
}

