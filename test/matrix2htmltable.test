package require tcltest
package require -exact gen 1.15.0
source gen-test-common.tcl

namespace eval Matrix2HtmlTableTest {}



proc Matrix2HtmlTableTest::Test-1 {} {

::tcltest::test Matrix2HtmlTable-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {{1 2 3} {4 5 6} {7 8 9}}
puts [Matrix2HtmlTable $MyMatrix --first-row-is-not-header]
}  -cleanup {}  -result {}  -output {<table>
<tr>
<td>1</td><td>2</td><td>3</td>
</tr>
<tr>
<td>4</td><td>5</td><td>6</td>
</tr>
<tr>
<td>7</td><td>8</td><td>9</td>
</tr>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-2 {} {

::tcltest::test Matrix2HtmlTable-1 {Empty input}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {}
puts [Matrix2HtmlTable $MyMatrix]
}  -cleanup {}  -result {}  -output {<table>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-3 {} {

::tcltest::test Matrix2HtmlTable-2 {One list with one element}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {1}
puts [Matrix2HtmlTable $MyMatrix]
}  -cleanup {}  -result {}  -output {<table>
<tr>
<td>1</td>
</tr>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-4 {} {

::tcltest::test Matrix2HtmlTable-3 {One row only}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {{1 2 3}}
puts [Matrix2HtmlTable $MyMatrix]
}  -cleanup {}  -result {}  -output {<table>
<tr>
<td>1</td><td>2</td><td>3</td>
</tr>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-5 {} {

::tcltest::test Matrix2HtmlTable-4 {One column only}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {1 2 3}
puts [Matrix2HtmlTable $MyMatrix]
}  -cleanup {}  -result {}  -output {<table>
<tr>
<td>1</td>
</tr>
<tr>
<td>2</td>
</tr>
<tr>
<td>3</td>
</tr>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-6 {} {

::tcltest::test Matrix2HtmlTable-5 {Input is not a matrix}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {1 {2 2} {3 3 3}}
puts [Matrix2HtmlTable $MyMatrix]
}  -cleanup {}  -result {Variable MatrixValue has invalid value 1 {2 2} {3 3 3}.}  -output {}  -returnCodes {1}  

}



proc Matrix2HtmlTableTest::Test-7 {} {

::tcltest::test Matrix2HtmlTable-6 {First row is header}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {{Col1 Col2 Col3} {1 2 3} {4 5 6} {7 8 9}}
puts [Matrix2HtmlTable $MyMatrix --first-row-is-header]
}  -cleanup {}  -result {}  -output {<table>
<tr>
<th>Col1</th><th>Col2</th><th>Col3</th>
</tr>
<tr>
<td>1</td><td>2</td><td>3</td>
</tr>
<tr>
<td>4</td><td>5</td><td>6</td>
</tr>
<tr>
<td>7</td><td>8</td><td>9</td>
</tr>
</table>
}  -returnCodes {0}  

}



proc Matrix2HtmlTableTest::Test-8 {} {

::tcltest::test Matrix2HtmlTable-7 {Invalid value for FirstRowOption}  -constraints {[expr [CheckAllDependenciesLoaded Matrix2HtmlTable]]}  -setup {}  -body {set MyMatrix {{Col1 Col2 Col3} {1 2 3} {4 5 6} {7 8 9}}
puts [Matrix2HtmlTable $MyMatrix --first-row-header]
}  -cleanup {}  -result {Variable FirstRowOption has invalid value --first-row-header.}  -output {}  -returnCodes {1}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     Matrix2HtmlTableTest::Test-1
     Matrix2HtmlTableTest::Test-2
     Matrix2HtmlTableTest::Test-3
     Matrix2HtmlTableTest::Test-4
     Matrix2HtmlTableTest::Test-5
     Matrix2HtmlTableTest::Test-6
     Matrix2HtmlTableTest::Test-7
     Matrix2HtmlTableTest::Test-8
} else {
     foreach Element [lrange $::argv 1 end] {
          Matrix2HtmlTableTest::Test-[set Element]
     }
}

