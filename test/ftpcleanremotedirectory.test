package require tcltest
package require -exact gen 1.10.2
source gen-test-common.tcl

namespace eval FtpCleanRemoteDirectoryTest {}



proc FtpCleanRemoteDirectoryTest::Test-1 {} {

::tcltest::test FtpCleanRemoteDirectory-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
::GenTest::Ftp::RunRemote "./ResetDirectory.sh one-file"
}  -body {set RemoteDirectory one-file
set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          # Switch to directory
          set Ok [ftp::Cd $FtpHandle $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory]
          if {$Ok == 0} {
               error "Could not change into remote directory $RemoteDirectory. Quitting."
          }
          FtpCleanRemoteDirectory $FtpHandle .
          set Ok 1
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
if {$Ok == 1} {
	set Result [::GenTest::Ftp::RunRemote "diff -w -r $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory $GenTest::Ftp::RemoteRoot/clean/expected/$RemoteDirectory"]
} else {
     set Result 1
}
}  -cleanup {# RunRemote "./ResetDirectory.sh one-file"
}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpCleanRemoteDirectoryTest::Test-2 {} {

::tcltest::test FtpCleanRemoteDirectory-1 {Remote directory does not exist}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
}  -body {set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          FtpCleanRemoteDirectory $FtpHandle asdf
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
}  -cleanup {}  -result {FTP: Could not change into remote directory asdf. Quitting.}  -output {}  -returnCodes {1}  

}



proc FtpCleanRemoteDirectoryTest::Test-3 {} {

::tcltest::test FtpCleanRemoteDirectory-2 {No ftp connection}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {}  -body {set FtpHandle -1
FtpCleanRemoteDirectory $FtpHandle .
}  -cleanup {}  -result {FTP: Could not change into remote directory .. Quitting.}  -output {}  -returnCodes {1}  

}



proc FtpCleanRemoteDirectoryTest::Test-4 {} {

::tcltest::test FtpCleanRemoteDirectory-3 {Empty already}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
::GenTest::Ftp::RunRemote "./ResetDirectory.sh empty-already"
}  -body {set RemoteDirectory empty-already
set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          # Switch to directory
          set Ok [ftp::Cd $FtpHandle $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory]
          if {$Ok == 0} {
               error "Could not change into remote directory $RemoteDirectory. Quitting."
          }
          FtpCleanRemoteDirectory $FtpHandle .
          set Ok 1
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
if {$Ok == 1} {
	set Result [::GenTest::Ftp::RunRemote "diff -w -r $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory $GenTest::Ftp::RemoteRoot/clean/expected/$RemoteDirectory"]
} else {
     set Result 1
}
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpCleanRemoteDirectoryTest::Test-5 {} {

::tcltest::test FtpCleanRemoteDirectory-4 {Has empty subdir}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
::GenTest::Ftp::RunRemote "./ResetDirectory.sh has-empty-subdir"
}  -body {set RemoteDirectory has-empty-subdir
set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          # Switch to directory
          set Ok [ftp::Cd $FtpHandle $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory]
          if {$Ok == 0} {
               error "Could not change into remote directory $RemoteDirectory. Quitting."
          }
          FtpCleanRemoteDirectory $FtpHandle .
          set Ok 1
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
if {$Ok == 1} {
	set Result [::GenTest::Ftp::RunRemote "diff -w -r $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory $GenTest::Ftp::RemoteRoot/clean/expected/$RemoteDirectory"]
} else {
     set Result 1
}
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpCleanRemoteDirectoryTest::Test-6 {} {

::tcltest::test FtpCleanRemoteDirectory-5 {Has subdir with file}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
::GenTest::Ftp::RunRemote "./ResetDirectory.sh has-subdir-with-file"
}  -body {set RemoteDirectory has-subdir-with-file
set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          # Switch to directory
          set Ok [ftp::Cd $FtpHandle $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory]
          if {$Ok == 0} {
               error "Could not change into remote directory $RemoteDirectory. Quitting."
          }
          FtpCleanRemoteDirectory $FtpHandle .
          set Ok 1
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
if {$Ok == 1} {
	set Result [::GenTest::Ftp::RunRemote "diff -w -r $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory $GenTest::Ftp::RemoteRoot/clean/expected/$RemoteDirectory"]
} else {
     set Result 1
}
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpCleanRemoteDirectoryTest::Test-7 {} {

::tcltest::test FtpCleanRemoteDirectory-6 {Two files}  -constraints {[expr [CheckAllDependenciesLoaded FtpCleanRemoteDirectory]]}  -setup {source ftp-test-config.tcl
::GenTest::Ftp::RunRemote "./ResetDirectory.sh two-files"
}  -body {set RemoteDirectory two-files
set FtpHandle [ftp::Open $GenNS::Ftp::Server $GenNS::Ftp::Username $GenNS::Ftp::Password {*}$GenNS::Ftp::OptionsList]
if {$FtpHandle == -1} {
     error "FTP: Could not open connection!"
} else {
     try {
          # Switch to directory
          set Ok [ftp::Cd $FtpHandle $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory]
          if {$Ok == 0} {
               error "Could not change into remote directory $RemoteDirectory. Quitting."
          }
          FtpCleanRemoteDirectory $FtpHandle .
          set Ok 1
     } finally {
          DbgPrint "Closing connection"
          ftp::Close $FtpHandle
     }
}
if {$Ok == 1} {
	set Result [::GenTest::Ftp::RunRemote "diff -w -r $GenTest::Ftp::RemoteRoot/clean/temp/$RemoteDirectory $GenTest::Ftp::RemoteRoot/clean/expected/$RemoteDirectory"]
} else {
     set Result 1
}
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     FtpCleanRemoteDirectoryTest::Test-1
     FtpCleanRemoteDirectoryTest::Test-2
     FtpCleanRemoteDirectoryTest::Test-3
     FtpCleanRemoteDirectoryTest::Test-4
     FtpCleanRemoteDirectoryTest::Test-5
     FtpCleanRemoteDirectoryTest::Test-6
     FtpCleanRemoteDirectoryTest::Test-7
} else {
     foreach Element [lrange $::argv 1 end] {
          FtpCleanRemoteDirectoryTest::Test-[set Element]
     }
}

