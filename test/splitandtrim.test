package require tcltest
package require -exact gen 1.14.0
source gen-test-common.tcl

namespace eval SplitAndTrimTest {}



proc SplitAndTrimTest::Test-1 {} {

::tcltest::test SplitAndTrim-0 {Basic test - 1}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim "one ,two, three" ","
}  -cleanup {}  -result {one two three}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-2 {} {

::tcltest::test SplitAndTrim-1 {Basic test - 2}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim "one    two    three"}  -cleanup {}  -result {one two three}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-3 {} {

::tcltest::test SplitAndTrim-2 {Split misses}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim "one, two, three" "/"}  -cleanup {}  -result {{one, two, three}}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-4 {} {

::tcltest::test SplitAndTrim-3 {Empty target string}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim "" "/" " "
	}  -cleanup {}  -result {}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-5 {} {

::tcltest::test SplitAndTrim-4 {Empty split value}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim abc ""}  -cleanup {}  -result {a b c}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-6 {} {

::tcltest::test SplitAndTrim-5 {Empty trim value}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {SplitAndTrim "one ,two, three" "," ""}  -cleanup {}  -result {{one } two { three}}  -output {}  -returnCodes {0}  

}



proc SplitAndTrimTest::Test-7 {} {

::tcltest::test SplitAndTrim-6 {Test at}  -constraints {[expr [CheckAllDependenciesLoaded SplitAndTrim]]}  -setup {}  -body {set MyString "one    two    three"
SplitAndTrim @MyString
puts $MyString
}  -cleanup {}  -result {}  -output {one two three
}  -returnCodes {0}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     SplitAndTrimTest::Test-1
     SplitAndTrimTest::Test-2
     SplitAndTrimTest::Test-3
     SplitAndTrimTest::Test-4
     SplitAndTrimTest::Test-5
     SplitAndTrimTest::Test-6
     SplitAndTrimTest::Test-7
} else {
     foreach Element [lrange $::argv 1 end] {
          SplitAndTrimTest::Test-[set Element]
     }
}

