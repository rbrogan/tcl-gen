package require tcltest
package require -exact gen 1.18.0
source gen-test-common.tcl

namespace eval RaiseTest {}



proc RaiseTest::Test-1 {} {

::tcltest::test Raise-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {1 one 2 two}
set NewList [Raise $MyList 2]
puts $NewList}  -cleanup {}  -result {}  -output {{1 one} {2 two}
}  -returnCodes {0}  

}



proc RaiseTest::Test-2 {} {

::tcltest::test Raise-1 {Input list is empty}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {}
set NewList [Raise $MyList 2]
}  -cleanup {}  -result {Input value 2 is out-of-range.}  -output {}  -returnCodes {1}  

}



proc RaiseTest::Test-3 {} {

::tcltest::test Raise-2 {Input value is non-positive}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {one two three}
Raise $MyList -1
}  -cleanup {}  -result {Expected positive input value, got input value -1 instead.}  -output {}  -returnCodes {1}  

}



proc RaiseTest::Test-4 {} {

::tcltest::test Raise-3 {Input value does not evenly divide list length}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {one 1 two 2}
Raise $MyList 3}  -cleanup {}  -result {Input value 3 does not divide list evenly.}  -output {}  -returnCodes {1}  

}



proc RaiseTest::Test-5 {} {

::tcltest::test Raise-4 {Raise by one}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {1 one 2 two}
Raise $MyList 1}  -cleanup {}  -result {1 one 2 two}  -output {}  -returnCodes {0}  

}



proc RaiseTest::Test-6 {} {

::tcltest::test Raise-5 {Raise by more than list length}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {1 one 2 two}
Raise $MyList 5}  -cleanup {}  -result {Input value 5 is out-of-range.}  -output {}  -returnCodes {1}  

}



proc RaiseTest::Test-7 {} {

::tcltest::test Raise-6 {Raise by list length}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {1 one 2 two}
Raise $MyList 4}  -cleanup {}  -result {{1 one 2 two}}  -output {}  -returnCodes {0}  

}



proc RaiseTest::Test-8 {} {

::tcltest::test Raise-7 {Test at}  -constraints {[expr [CheckAllDependenciesLoaded Raise]]}  -setup {}  -body {set MyList {1 one 2 two}
Raise @MyList 2
puts $MyList
}  -cleanup {}  -result {}  -output {{1 one} {2 two}
}  -returnCodes {0}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     RaiseTest::Test-1
     RaiseTest::Test-2
     RaiseTest::Test-3
     RaiseTest::Test-4
     RaiseTest::Test-5
     RaiseTest::Test-6
     RaiseTest::Test-7
     RaiseTest::Test-8
} else {
     foreach Element [lrange $::argv 1 end] {
          RaiseTest::Test-[set Element]
     }
}

