package require tcltest
package require gen

::tcltest::test TimeOfDayIsBetween-0 {First is between second and third}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-1 {First is before second and third}  -setup {}  -body {TimeOfDayIsBetween 01:02:01 01:02:02 01:02:04}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-2 {First is after second and third}  -setup {}  -body {TimeOfDayIsBetween 01:02:05 01:02:02 01:02:04}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-3 {First equals second}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-4 {First equals third}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-5 {Second is after third}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:04 01:02:02}  -cleanup {}  -result {Arguments SecondTimeOfDay and ThirdTimeOfDay have incoherent values 01:02:04 and 01:02:02.}  -output {}  -returnCodes {1}  


::tcltest::test TimeOfDayIsBetween-6 {First is invalid}  -setup {}  -body {TimeOfDayIsBetween asdf 01:02:02 01:02:04}  -cleanup {}  -result {Variable FirstTimeOfDay has invalid value asdf.}  -output {}  -returnCodes {1}  


::tcltest::test TimeOfDayIsBetween-7 {Second is invalid}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 asdf 01:02:04}  -cleanup {}  -result {Variable SecondTimeOfDay has invalid value asdf.}  -output {}  -returnCodes {1}  


::tcltest::test TimeOfDayIsBetween-8 {Third is invalid}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 asdf}  -cleanup {}  -result {Variable ThirdTimeOfDay has invalid value asdf.}  -output {}  -returnCodes {1}  


::tcltest::test TimeOfDayIsBetween-9 {Use alternate format}  -setup {}  -body {SetTimeOfDayFormat {{%I%M %p} -timezone :America/New_York -locale en_US}
TimeOfDayIsBetween {0101 PM} {0100 PM} {0102 PM}
}  -cleanup {SetTimeOfDayFormat {%H:%M:%S}
}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-10 {Option is invalid}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04 asdf}  -cleanup {}  -result {Variable Option has invalid value asdf.}  -output {}  -returnCodes {1}  


::tcltest::test TimeOfDayIsBetween-11 {First is equal to second and both inclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04 BothInclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-12 {First is equal to second and LeftInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04 LeftInclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-13 {First is equal to second and LeftExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04 LeftExclusive
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-14 {First is equal to third and BothInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04 BothInclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-15 {First is equal to third and LeftInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04 LeftInclusive
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-16 {First is equal to third and LeftExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04 LeftExclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-17 {First is equal to second and RightInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04 RightInclusive
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-18 {First is equal to second and RightExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:02 01:02:02 01:02:04 RightExclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-19 {First is equal to third and RightInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04 RightInclusive
}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-20 {First is equal to third and RightExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:04 01:02:02 01:02:04 RightExclusive
}  -cleanup {}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-21 {First is between second and third, BothInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04 BothInclusive}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-22 {First is between second and third, LeftExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04 LeftExclusive}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-23 {First is between second and third, RightInclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04 RightInclusive}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test TimeOfDayIsBetween-24 {First is between second and third, RightExclusive}  -setup {}  -body {TimeOfDayIsBetween 01:02:03 01:02:02 01:02:04 RightExclusive}  -cleanup {}  -result {1}  -output {}  -returnCodes {0}  


