package require tcltest
package require -exact gen 1.6.0

::tcltest::test FtpMirrorRemoteToLocal-0 {Basic test}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/one-file $::FtpTestLocalRoot/downloadto/expected/one-file"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-1 {Empty directory}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/empty
file copy -force $::FtpTestLocalRoot/downloadto/original/empty $::FtpTestLocalRoot/downloadto/temp/empty}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/empty $::FtpTestLocalRoot/downloadto/temp/empty}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/empty $::FtpTestLocalRoot/downloadto/expected/empty"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/empty
file copy -force $::FtpTestLocalRoot/downloadto/original/empty $::FtpTestLocalRoot/downloadto/temp/empty
}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-2 {Has subdirectory}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-subdir
file copy -force $::FtpTestLocalRoot/downloadto/original/has-subdir $::FtpTestLocalRoot/downloadto/temp/has-subdir}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/has-subdir $::FtpTestLocalRoot/downloadto/temp/has-subdir}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/has-subdir $::FtpTestLocalRoot/downloadto/expected/has-subdir"
     set Result [catch {exec {*}$DiffCommand}]     
}
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-subdir
file copy -force $::FtpTestLocalRoot/downloadto/original/has-subdir $::FtpTestLocalRoot/downloadto/temp/has-subdir
}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-3 {Has unmatched files}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files
file copy -force $::FtpTestLocalRoot/downloadto/original/has-unmatched-files $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files $::FtpTestLocalRoot/downloadto/expected/has-unmatched-files"
     set Result [catch {exec {*}$DiffCommand}]     
}
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files
file copy -force $::FtpTestLocalRoot/downloadto/original/has-unmatched-files $::FtpTestLocalRoot/downloadto/temp/has-unmatched-files
}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-4 {Two files}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/two-files
file copy -force $::FtpTestLocalRoot/downloadto/original/two-files $::FtpTestLocalRoot/downloadto/temp/two-files}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/two-files $::FtpTestLocalRoot/downloadto/temp/two-files}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/two-files $::FtpTestLocalRoot/downloadto/expected/two-files"
     set Result [catch {exec {*}$DiffCommand}]     
}
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/two-files
file copy -force $::FtpTestLocalRoot/downloadto/original/two-files $::FtpTestLocalRoot/downloadto/temp/two-files
}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-5 {Has two levels of subdirectories}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels
file copy -force $::FtpTestLocalRoot/downloadto/original/has-subdir-two-levels $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/has-subdir-two-levels $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels $::FtpTestLocalRoot/downloadto/expected/has-subdir-two-levels"
     set Result [catch {exec {*}$DiffCommand}]     
}
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels
file copy -force $::FtpTestLocalRoot/downloadto/original/has-subdir-two-levels $::FtpTestLocalRoot/downloadto/temp/has-subdir-two-levels
}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-6 {Server not found}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Server 10.10.10.10
set Result [catch {FtpMirrorRemoteToLocal $::RemoteRoot/one-file $::LocalRoot/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-7 {Username invalid}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Username qwerasdfzxcv
set Result [catch {FtpMirrorRemoteToLocal $::RemoteRoot/one-file $::LocalRoot/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-8 {Password invalid}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {set GenNS::Ftp::Password qwerasdfzxcv
set Result [catch {FtpMirrorRemoteToLocal $::RemoteRoot/one-file $::LocalRoot/temp/one-file}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-9 {Bad local directory}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/yuiop}
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-10 {Bad remote directory}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -body {catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/qwerpoiu $::FtpTestLocalRoot/downloadto/temp/empty}
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-11 {Binary transfer type}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -body {set GenNS::Ftp::FileTransferType binary
set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/one-file $::FtpTestLocalRoot/downloadto/expected/one-file"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-13 {Bad transfer type}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -body {set GenNS::Ftp::FileTransferType asdf
FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {Unknown FTP file transfer type asdf! Should be ascii, binary, tenex, or left empty.}  -output {}  -returnCodes {1}  


::tcltest::test FtpMirrorRemoteToLocal-14 {Bad test}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file
SaveWorkingDirectory
}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/empty}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/empty $::FtpTestLocalRoot/downloadto/expected/empty"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/one-file
file copy -force $::FtpTestLocalRoot/downloadto/original/one-file $::FtpTestLocalRoot/downloadto/temp/one-file}  -result {1}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-15 {Different sizes}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-sizes
file copy -force $::FtpTestLocalRoot/downloadto/original/different-sizes $::FtpTestLocalRoot/downloadto/temp/different-sizes
SaveWorkingDirectory
}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/different-sizes $::FtpTestLocalRoot/downloadto/temp/different-sizes}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/different-sizes $::FtpTestLocalRoot/downloadto/expected/different-sizes"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-sizes
file copy -force $::FtpTestLocalRoot/downloadto/original/different-sizes $::FtpTestLocalRoot/downloadto/temp/different-sizes}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-16 {Has unmatched subdir}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir
file copy -force $::FtpTestLocalRoot/downloadto/original/has-unmatched-subdir $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir
SaveWorkingDirectory
}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/one-file $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir $::FtpTestLocalRoot/downloadto/expected/has-unmatched-subdir"
     set Result [catch {exec {*}$DiffCommand}]     
}     
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir
file copy -force $::FtpTestLocalRoot/downloadto/original/has-unmatched-subdir $::FtpTestLocalRoot/downloadto/temp/has-unmatched-subdir}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-17 {Various times and sizes}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-times
file copy -force $::FtpTestLocalRoot/downloadto/original/different-times $::FtpTestLocalRoot/downloadto/temp/different-times
SaveWorkingDirectory
}  -body {set Result [catch {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/different-times $::FtpTestLocalRoot/downloadto/temp/different-times}]
if {$Result == 0} {
     set DiffCommand "$::FtpTestDiffCommandPrefix $::FtpTestLocalRoot/downloadto/temp/different-times $::FtpTestLocalRoot/downloadto/expected/different-times"
     set Result [catch {exec {*}$DiffCommand}]     
}
set Result
}  -cleanup {RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-times
file copy -force $::FtpTestLocalRoot/downloadto/original/different-times $::FtpTestLocalRoot/downloadto/temp/different-times}  -result {0}  -output {}  -returnCodes {0}  


::tcltest::test FtpMirrorRemoteToLocal-18 {Test dry run}  -constraints {}  -setup {source ftp-test-config.tcl
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-times
file copy -force $::FtpTestLocalRoot/downloadto/original/different-times $::FtpTestLocalRoot/downloadto/temp/different-times
SaveWorkingDirectory
set GenNS::Ftp::DryRun 1}  -body {FtpMirrorRemoteToLocal $::FtpTestRemoteRoot/downloadfrom/different-times $::FtpTestLocalRoot/downloadto/temp/different-times
}  -cleanup {set GenNS::Ftp::DryRun 0
RestoreWorkingDirectory
file delete -force $::FtpTestLocalRoot/downloadto/temp/different-times
file copy -force $::FtpTestLocalRoot/downloadto/original/different-times $::FtpTestLocalRoot/downloadto/temp/different-times}  -result {}  -output {Would have downloaded does-not-exist-on-local.txt
Would have downloaded local-newer-and-bigger.txt
Would have downloaded local-newer-and-smaller.txt
Would have downloaded remote-newer-and-bigger.txt
Would have downloaded remote-newer-and-smaller.txt
Would have downloaded remote-newer.txt
Would have deleted does-not-exist-on-remote.txt
}  -returnCodes {0}  


