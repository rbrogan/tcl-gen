package require tcltest
package require -exact gen 1.10.2
source gen-test-common.tcl

namespace eval FtpMirrorLocalToRemoteTest {}


namespace eval FtpMirrorLocalToRemoteTest {

proc Setup {RemoteDirectory} {
     source ftp-test-config.tcl
     $GenTest::Ftp::ResetRemoteDirectoryCommandName $RemoteDirectory
     SaveWorkingDirectory
}

proc Test {LocalDirectory ExpectedRemoteDirectory} {
     set Result [catch {FtpMirrorLocalToRemote $GenTest::Ftp::LocalRoot/uploadfrom/$LocalDirectory $GenTest::Ftp::RemoteRoot/uploadto/temp}]
     if {$Result == 0} {
          set Result [$GenTest::Ftp::DiffRemoteDirectoriesCommandName $ExpectedRemoteDirectory]
     }
     return $Result
}

}

proc FtpMirrorLocalToRemoteTest::Test-1 {} {

::tcltest::test FtpMirrorLocalToRemote-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {FtpMirrorLocalToRemoteTest::Test one-file FtpMirrorLocalToRemote/one-file
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-2 {} {

::tcltest::test FtpMirrorLocalToRemote-1 {Empty directory}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup empty
}  -body {FtpMirrorLocalToRemoteTest::Test empty FtpMirrorLocalToRemote/empty
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-3 {} {

::tcltest::test FtpMirrorLocalToRemote-2 {Has subdirectory}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup has-subdir
}  -body {FtpMirrorLocalToRemoteTest::Test has-subdir FtpMirrorLocalToRemote/has-subdir
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-4 {} {

::tcltest::test FtpMirrorLocalToRemote-3 {Has unmatched files}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup has-unmatched-files
}  -body {FtpMirrorLocalToRemoteTest::Test one-file FtpMirrorLocalToRemote/has-unmatched-files
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-5 {} {

::tcltest::test FtpMirrorLocalToRemote-4 {Two files}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup two-files
}  -body {FtpMirrorLocalToRemoteTest::Test two-files FtpMirrorLocalToRemote/two-files
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-6 {} {

::tcltest::test FtpMirrorLocalToRemote-5 {Has two levels of subdirectories}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup has-subdir-two-levels
}  -body {FtpMirrorLocalToRemoteTest::Test has-subdir-two-levels FtpMirrorLocalToRemote/has-subdir-two-levels
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-7 {} {

::tcltest::test FtpMirrorLocalToRemote-6 {Server not found}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set GenNS::Ftp::Server 10.10.10.10
set Result [catch {FtpMirrorLocalToRemote $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-8 {} {

::tcltest::test FtpMirrorLocalToRemote-7 {Username invalid}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set GenNS::Ftp::Username asdfqwersdfg
set Result [catch {FtpMirrorLocalToRemote $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp}]
set Result [Flip $Result]
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-9 {} {

::tcltest::test FtpMirrorLocalToRemote-8 {Password invalid}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set GenNS::Ftp::Password erfjwepoijaspdi
set Result [catch {FtpMirrorLocalToRemote $GenTest::Ftp::LocalRoot/uploadfrom/one-file $GenTest::Ftp::RemoteRoot/uploadto/temp}]
set Result [Flip $Result]}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-10 {} {

::tcltest::test FtpMirrorLocalToRemote-9 {Bad local directory}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {FtpMirrorLocalToRemoteTest::Test asdfasdfasd FtpMirrorLocalToRemote/has-unmatched-files
}  -cleanup {RestoreWorkingDirectory}  -result {1}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-11 {} {

::tcltest::test FtpMirrorLocalToRemote-10 {Bad remote directory}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set Result [catch {FtpMirrorLocalToRemote $GenTest::Ftp::LocalRoot/uploadfrom/one-file aasertgwsdfasdf}]
set Result [Flip $Result]
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-12 {} {

::tcltest::test FtpMirrorLocalToRemote-11 {Binary transfer type}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set GenNS::Ftp::FileTransferType binary
FtpMirrorLocalToRemoteTest::Test one-file FtpMirrorLocalToRemote/one-file
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-13 {} {

::tcltest::test FtpMirrorLocalToRemote-13 {Has unmatched subdir}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup has-unmatched-subdir
}  -body {FtpMirrorLocalToRemoteTest::Test one-file FtpMirrorLocalToRemote/has-unmatched-subdir
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-14 {} {

::tcltest::test FtpMirrorLocalToRemote-14 {Various times and sizes}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup different-times
}  -body {FtpMirrorLocalToRemoteTest::Test different-times FtpMirrorLocalToRemote/different-times
}  -cleanup {RestoreWorkingDirectory}  -result {0}  -output {}  -returnCodes {0}  

}



proc FtpMirrorLocalToRemoteTest::Test-15 {} {

::tcltest::test FtpMirrorLocalToRemote-15 {Test dry run}  -constraints {[expr [CheckAllDependenciesLoaded FtpMirrorLocalToRemote]]}  -setup {FtpMirrorLocalToRemoteTest::Setup one-file
}  -body {set GenNS::Ftp::DryRun 1
FtpMirrorLocalToRemoteTest::Test one-file FtpMirrorLocalToRemote/one-file
}  -cleanup {RestoreWorkingDirectory
set GenNS::Ftp::DryRun 0
}  -result {1}  -output {Would have uploaded file.txt
}  -returnCodes {0}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     FtpMirrorLocalToRemoteTest::Test-1
     FtpMirrorLocalToRemoteTest::Test-2
     FtpMirrorLocalToRemoteTest::Test-3
     FtpMirrorLocalToRemoteTest::Test-4
     FtpMirrorLocalToRemoteTest::Test-5
     FtpMirrorLocalToRemoteTest::Test-6
     FtpMirrorLocalToRemoteTest::Test-7
     FtpMirrorLocalToRemoteTest::Test-8
     FtpMirrorLocalToRemoteTest::Test-9
     FtpMirrorLocalToRemoteTest::Test-10
     FtpMirrorLocalToRemoteTest::Test-11
     FtpMirrorLocalToRemoteTest::Test-12
     FtpMirrorLocalToRemoteTest::Test-13
     FtpMirrorLocalToRemoteTest::Test-14
     FtpMirrorLocalToRemoteTest::Test-15
} else {
     foreach Element [lrange $::argv 1 end] {
          FtpMirrorLocalToRemoteTest::Test-[set Element]
     }
}

