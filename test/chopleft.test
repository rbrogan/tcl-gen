package require tcltest
package require -exact gen 1.10.3
source gen-test-common.tcl

namespace eval ChopLeftTest {}



proc ChopLeftTest::Test-1 {} {

::tcltest::test ChopLeft-0 {Basic test}  -constraints {[expr [CheckAllDependenciesLoaded ChopLeft]]}  -setup {}  -body {ChopLeft "abcd"}  -cleanup {}  -result {bcd}  -output {}  -returnCodes {0}  

}



proc ChopLeftTest::Test-2 {} {

::tcltest::test ChopLeft-1 {Basic test - specify count}  -constraints {[expr [CheckAllDependenciesLoaded ChopLeft]]}  -setup {}  -body {ChopLeft "xyz" 2}  -cleanup {}  -result {z}  -output {}  -returnCodes {0}  

}



proc ChopLeftTest::Test-3 {} {

::tcltest::test ChopLeft-2 {Chop count greater than string length}  -constraints {[expr [CheckAllDependenciesLoaded ChopLeft]]}  -setup {}  -body {ChopLeft "xyz" 4}  -cleanup {}  -result {}  -output {}  -returnCodes {0}  

}



proc ChopLeftTest::Test-4 {} {

::tcltest::test ChopLeft-3 {Test at}  -constraints {[expr [CheckAllDependenciesLoaded ChopLeft]]}  -setup {}  -body {set MyString abcd
ChopLeft @MyString 2
puts $MyString
}  -cleanup {}  -result {}  -output {cd
}  -returnCodes {0}  

}



proc ChopLeftTest::Test-5 {} {

::tcltest::test ChopLeft-4 {Count is not an integer}  -constraints {[expr [CheckAllDependenciesLoaded ChopLeft]]}  -setup {}  -body {ChopLeft "abcd" 1.2
}  -cleanup {}  -result {Variable Count has invalid value 1.2.}  -output {}  -returnCodes {1}  

}



if {([llength $::argv] == 0) || ([lindex $::argv 0] ne "target")} {
     ChopLeftTest::Test-1
     ChopLeftTest::Test-2
     ChopLeftTest::Test-3
     ChopLeftTest::Test-4
     ChopLeftTest::Test-5
} else {
     foreach Element [lrange $::argv 1 end] {
          ChopLeftTest::Test-[set Element]
     }
}

