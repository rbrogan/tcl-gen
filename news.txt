Gen

NEWS

2015.12.14

v1.10.2 Revision

CN_0002
     Updated loading-module-data.tcl to include try command in various entries. (Fix for KI_0003.)
     Added test constraint that all the dependencies of the command must be loaded, and, if not, then the command is skipped. (Fix for KI_0004.)
     Put in data files for CopyEverythingInDirectory tests. (Fix for KI_0005.)

2015.12.07

v1.10.1 Revision

CN_0001
     Take out attempts to load unreleased commands. (Fix for KI_0001.) 
     Reduce sqlite version requirement. (Partial fix for KI_0002.)

2015.11.16
v1.10.0 Release

This month Gen adds a few more time convenience commands, perhaps for use in
applications which involve scheduling, or that otherwise want to trigger things
at certain times of the day. After all, a design goal of Gen is to be
anti-minimalist and have convenience commands which directly match the immediate
intentions of the developer (ideally).

CurrentTimeOfDayIsAbout
     Check if current time is within an interval around target.

CurrentTimeOfDayIsAfter
     Check whether the current time-of-day is after the target.

CurrentTimeOfDayIsAtOrAfter
     Check whether the current time is at or after the target.

CurrentTimeOfDayIsAtOrBefore
     Check whether current time-of-day is at or before target.

CurrentTimeOfDayIsBefore
     Check whether current time-of-day is before target.

CurrentTimeOfDayIsBetween
     Check if current time-of-day is between the two targets.



On the non-command front, we have an experimental / preview feature, which you
can choose to use if you want (by default it is disabled). Say you would like to
see Gen commands go into their own namespace (rather than use the global
namespace), you can do [set GenNS::PutGenCommandsInNamespace 1]. After that
StringInsert becomes GenNS::StringInsert, ChangeCasing becomes
GenNS::ChangeCasing, and so on. (But, if you want nothing to change, you do not
have to change anything; by default, your current Gen code will act no
different.) Suppose further, that you want to then import those commands into a
namespace, so that you can leave out the GenNS:: part. You can do [namespace
eval :: {namespace import GenNS::*}] to import them into the global namespace
and then can use plain old StringInsert (for example) once again. Or suppose you
want to import them into your namespace called MyNS. You can do [namespace eval
MyNS {namespace import GenNS::*}] and then within code for that namespace you
can do plain old StringInsert.

However, consider this an experimental / preview feature. It is still too soon
to settle on namespacing for Gen. Why? We have the following open problem:
Suppose that two different libraries use different versions of Gen. These Gen
versions have incompatible commands. So long as only one of these libraries is
loaded (and it gets the version of Gen that it wants) then everything is fine.
But if an application were to use both the two libraries then there is a
problem. Each library will try to load a different version of Gen and one
library is not going to get the version that it wants. (Tcl does not support
separate versions of the same package being loaded at the same time, unless
separate slave interpreters are used.) At this point, one potential solution, or
scheme, would involve the use of namespaces. Different versions of commands
would go into separate namespaces. The namespace name would include versioning
information, and use of the namespace import command would be used to help hide
that information and keep things simple for the caller. Alternatively, we may
decide to simply change the package name for each major version (e.g. you do
[package require gen2]). Though this solution would work, it seems a bit ugly
and undesirable. At any rate, deciding how to do a namespace for Gen seems to be
a tricky thing. This overall problem will take more time to work out. Once
something is worked out, you will be able to find it on the Policies page and we
will likely post up a paper that goes through the problem, the different options
and how they were evaluated, which option was ultimately selected, and why.

There should be no Gen namespacing changes that would break current code until
the next major version change. (And if so, there would be a revision put out
that restores things.) Configurable experimental features like this one are the
exception, because they must be turned on to take effect.

The Partial Loading feature has been updated. In addition to
::GenNS::WarnOnFailureToLoadCommand (which will print out which commands do not
load due to not finding the needed package and version installed on the
machine), there is now ::GenNS::ReportOnPackagesLoaded. This option, if set,
will print out each package that Gen tries to load. If a package is not found or
if the version of package is less than what is desired, then you will get a
report which lists those commands which could not be loaded, and what version
they need in order to load. By default, both options are off, so Gen will load
silently.

Also, if you go to use a command which was not loaded, Gen will now print out
the missing dependencies and then throw an error.

2015.10.19
v1.9.0 Release

This month Gen adds a handful of date and datetime arithmetic commands to the
repertoire.

DateMinus
     Find the date that comes some time before the given one.

DatePlus
     Find the date that comes some time after the given one.

DatetimeMinus
     Find the datetime that comes some time before the given one.

DatetimePlus
     Find the datetime that comes some time after the given one.



We also have improved how the "Partial Loading" feature works. It will now try
to load each package and source one time only, and so it loads significantly
faster now. Note also the diagnostic / warning output for packages that fail to
load has changed. It will now show each package that does not load, followed by
a list of commands which cannot be used because of it. This should help in
deciding whether it is worthwhile to find and install the package. As before,
you must do set GenNS::WarnOnFailureToLoadCommand to 1 in gen-config.tcl or else
Gen will be silent about packages and commands not loaded.

Finally, we have sharpened up our release policies and added three new pages to
the site. The Policies page explains how the releases and hot fixes are done and
how the version number changes. The Known Issues page will show any known
issues, so if you run into a problem, you can check that to see if your problem
is known about. And you can also check the Latest Fixes page to see what issues
have been fixed and are either up now on the hot fixes branch (unofficial
changes between releases) or got put into the latest release.

2015.09.21
v1.8.0 Release

This month we have a few file system related commands and the start of the
partial loading feature.

BackupIfExists
     Make a backup if the file exists.

CopyEverythingInDirectory
     Copy all the files in the source directory to destination.

DeleteEverythingInDirectory
     Deletes contents of directory, all files and subdirectories.

LimitLineLengthInFile
     Take file and run textutil::adjust::adjust on each line.

RestoreIfExists
     Replace file with backup, if one can be found.




Gen will try to source a file called gen-user-config.tcl. You do not need to
create this file. But if you like, you can make such a file, put in your own
settings, and then when you update your version of Gen, you do not have to worry
about overwriting what you had changed in gen-config.tcl.

We also have begun implementing a partial loading feature. This means that you
do not need all the packages. You may (or may not) notice a slowdown in loading.
We hope to change that within a few releases by doing one-time checking and
loading. But what we have now is an incremental first step.

What follows is an excerpt from the documentation that goes over Partial Loading
in more detail --

Gen is meant to be a utility library that anyone can use. It is a bit
problematic to require someone to have every package that every Gen command
uses, especially if you want Gen only for certain commands. If Gen is about
convenience commands, then it should grow over time to include many commands
across many packages. But as it does that and its usefulness goes up, its
usability goes down because it puts extra burden on you to find and install many
packages. This is a problem we would like to solve.

The solution we are moving towards is to have Gen try to load what it can based
on what the you have available at load-time. If a command needs a missing
package then that command will not load, but still the Gen library will load. If
you do not need that command, then you do not need to bother with getting the
package.

It is expected that this feature will need to evolve out over time.

As of the current release, you will not see any apparent changes when you load
Gen. If you go to use a command that was not loaded, it will throw an error
saying the command was not successfully loaded because a certain dependency was
missing. This is not so different from trying to use the command and having it
complain that the command was not found. But it is better in that it will tell
you what package you need to get.

But suppose you want to know what commands are not being loaded right away?
There you can do set GenNS::WarnOnFailureToLoadCommand 1 within gen-config.tcl,
and when you load Gen it will print out a warning for each command that failed
to load and it will tell you what packages that were missing which caused it to
fail to load.



2015.09.12
v1.7.1 Revision

This is a revision: (1) an update of the error messages to make them more
consistent, (2) content added to the exception pages, and (3) (limited)
support for running FTP (upload) tests on other setups.

See the changelog for more information.

2015.08.24
v1.7.0 Revision

We continue on with our assortment of FTP-related commands. Also for this
release, we have begun putting things in place for a couple of new features.

Here are the new commands --

FtpCleanRemoteDirectory
     Clean remote directory of contents, but leave directory.

FtpDownloadDirectory
     Download from remote directory into local directory.

FtpDownloadSite
     Make connection, download files, close connection.

FtpMirrorLocalToRemote
     Make remote site match what local site has.

FtpUploadDirectory
     Upload local directory to remote directory.

FtpUploadSite
     Make connection, upload all files, close connection.




Now for other changes --

First, note that rather than use gen.tcl by itself, we have a separate source
file for each command. This helps out with a few things and is a (conceptual)
step towards the ability to partially load Gen based on what dependencies you
have on your machine. It also makes things be a bit more consistent with the
documentation and tests (each has a file per command).

Second, we have begun moving the exception (i.e. error) documentation out into
separate pages. These pages are like-to the regular command documentation and
vice versa. The purpose here is to set up a space where we will add details for
things like debugging, policies, etc., and be able do that without having too
much information on the main page.

The Run command has changed to save the pre-existing contents of ::argv and
restore them before exiting.

The test suite was changed to support FTP testing by making it possible to run
individual tests. However, this is an internal feature, should not interfere
with how tests normally run, and is not yet supported.

Since we prefer to keep strict deadlines and force something out, then revise,
not everything made it into this revision. Specifically:

* All the commands have been tested pretty well, but the set up involves things
like running commands on the remote machine to do a diff, redo the setup for the
next test, etc. Did not have time to make this be universal, so those tests will
fail for you. The commands should still work.
* The error messages for the FTP commands and other commands need to be gathered
up and put into the exception documentation.
* The tests for the FTP commands could stand to be touched up and made more
consistent.
* The documentation for the FTP commands could also stand to be touched up and
made more consistent.

So we will look to put out a revision that addresses these, get going with a
Known Issues page, etc.

2015.08.10
v1.6.0 Release

This week we have a short release which introduces some FTP-related commands.
More commands to follow in a couple of weeks. Check doc/about-ftp-use.html for
more information and test/README-test-ftp.txt or test/README-test-ftp.html for
information about testing FTP commands on your machine.

FtpCleanRemoteDirectory
     Clean remote directory of contents, but leave directory.

FtpWhichIsLarger
     Tell whether the local or remote file is larger or if same.

FtpWhichIsNewer
     Tell whether the local or remote file is newer or if same.

RestoreWorkingDirectory
     Change back to directory saved with SaveWorkingDirectory.

SaveWorkingDirectory
     Save the current working directory, so can later restore.

     
     
2015.07.27
v1.5.0 Release

This month we begin what we hope to be a series of minor releases which will
shake the rust off this project and get things moving to implement various
improvements piece-by-piece. Each release will have a modest installment of new
commands.

DiffHhmmss
     Do subtraction of time quantities in hh:mm:ss form.

Hhmmss2Seconds
     Take an input of the form hh:mm:ss and convert to seconds.

IsHhmmss
     Check whether the string passed in is of the form hh:mm:ss.

MultiplyHhmmss
     Multiply a time quantity in hh:mm:ss form by some factor.

Seconds2Hhmmss
     Convert a number of seconds to a string with form hh:mm:ss.

SumHhmmss
     Sum up a list of times.

     


2015.05.11
v1.4.3 Revision

Temporarily disabled helpx-related elements while making changes. Will post
announcement when restored.

2015.04.06
v1.4 Release

This month features miscellaneous commands across multiple categories.

AddEpilogue
     Add code to the end of a proc.
     
AddPrologue
     Add code to the beginning of a proc.
     
AppendString2File
     Open a file and write a string at the end, then close file.
     
IsMatrix
     Check whether list value is a matrix.
     
IsValidListIndex
     Check whether the given value works as an index.
     
ListEndIndex
     Return index of last element in list.
     
ListRemoveAt
     From a list, remove element(s) starting at a given index.
     
Matrix2HtmlTable
     Takes a list of lists, returns string encoding HTML table.
     
MultiSet
     Take list and copy values to variables, like lassign.
     
PrintMatrix
     Print out a table/matrix (e.g. query results).
     
SliceLeft
     Divide string by matching and separating to the left.
     
SliceRight
     Divide string by matching and separating to the right.
     
SplitNTimes
     Like split, except stops after a certain number of splits.
     
StringInsert
     Insert value into target string, starting from a location.
     

     
2015.03.02
v1.3 Release

This month focuses on the Windows Registry, though it also includes some dict
commands as well.

What follows is a listing of new commands:

IsDict
     Check whether string can be used as a dict.

PrintDict
     Print the contents of dict on the screen.

Dict2RegistryTree
     Write to registry from dict.

LinkTclVariableToRegistryValue
     Make link to propagate changes from Tcl var to registry.

RegistryExists
     Check whether a registry key or value exists.

RegistryPrint
     Print the contents of a registry key.

RegistryTree2Dict
     Make Tcl dict from Windows registry tree.

UnlinkTclVariableFromRegistryValue
     Stop propagating changes set up by previous link.


     
2015.03.02
v1.3 Release

This month focuses on the Windows Registry, though it also includes some dict
commands as well.

What follows is a listing of new commands:

IsDict
     Check whether string can be used as a dict.

PrintDict
     Print the contents of dict on the screen.

Dict2RegistryTree
     Write to registry from dict.

LinkTclVariableToRegistryValue
     Make link to propagate changes from Tcl var to registry.

RegistryExists
     Check whether a registry key or value exists.

RegistryPrint
     Print the contents of a registry key.

RegistryTree2Dict
     Make Tcl dict from Windows registry tree.

UnlinkTclVariableFromRegistryValue
     Stop propagating changes set up by previous link.


2015.02.01
v1.2 Release

For this month we have date and time commands. More commands are in the works.
Look for another batch of date and time commands in the future (and use the
feedback page to let us know what you would like).

Also note that we have made a slight upgrade to the documentation. Commands are
now organized by category, for ease-of-navigation.

What follows is a listing of new commands:

CurrentTimeOfDay
     Get the current time-of-day.

DateIsAfter
     Check if first date comes after the second date.

DateIsBefore
     Check whether the first date comes before the second.

DateIsBetween
     Check whether the first date comes between second and third.

DateIsOn
     Check if first date and second date are equal.

DateIsOnOrAfter
     Check if first date comes on or after the second date.

DateIsOnOrBefore
     Check if first date comes on or before the second date.

DateMinusDays
     Get the date some number of days before the given one.

DatePlusDays
     Add some number of days to a date.

DatetimeIsAfter
     Check whether the first datetime is after the second one.

DatetimeIsAt
     Check whether the first datetime happens at the second.

DatetimeIsAtOrAfter
     Check whether first datetime happens at or after second.

DatetimeIsAtOrBefore
     Check whether first datetime happens at or before second.

DatetimeIsBefore
     Check whether the first datetime is before the second.

DatetimeIsBetween
     Check whether the given datetime is between others.

IsTimeOfDay
     Check whether given string is of the form hh:mm:ss.

Now
     Get the current datetime as formatted string.

SetDateFormat
     Set the format dates will be in (e.g. YYYY-MM-DD).

SetDatetimeFormat
     Set format that datetimes will be in.

SetTimeOfDayFormat
     Set format that the time-of-day will be presented in.

TimeOfDayIsAfter
     Check whether the given time-of-day is after the second.

TimeOfDayIsAt
     Check whether the given time-of-day is at the second.

TimeOfDayIsAtOrAfter
     Check whether given time-of-day is at or after the second.

TimeOfDayIsAtOrBefore
     Check whether given time-of-day is at or before the second.

TimeOfDayIsBefore
     Check whether the first time-of-day is before the second.

TimeOfDayIsBetween
     Check whether given time-of-day is between the others.

Today
     Get the current date.

Tomorrow
     Get tomorrow's date.

Yesterday
     Get yesterday's date.

     
     
2015.01.04
v1.1 Release

This monthly update of Gen centers on SQL-related convenience commands. Also,
several existing commands have been updated to add support for a new @ notation
to designate input/output variables where values would normally be used:

set MyString [DoubleChop $MyString]

... becomes ...

DoubleChop @MyString

What follows is a listing of new commands:

Coe
     Concatenate the args but return empty if any is empty.

DbaseRegsub
     Do find/replace on a column of a SQL table.

DecrDbGlobal
     Find entry in the globals table and decrement it.

ForeachRecord
     Run a SELECT, map results to variables, and execute body.

GetDbGlobal
     Find and return value of entry in globals table.

IncrDbGlobal
     Increase the value of an entry in the global table by one.

LastId
     Find last id in the table and return it.

LinkVarToDbGlobal
     Put trace on variable so the database global gets writ also.

Q1
     Execute a query and return the first field of first record.

QQ
     Run the query with configured database and return result.

RunSqlCreateTable
     Create SQL table using table name and column names/types.

RunSqlEnter
     Do an update if an entry exists or an insert if not.

RunSqlInsertIfDoesNotExist
     Do an insert unless an entry already exists.

SetDbGlobal
     Finds an entry in the global table and sets it to a value.

SqlCountStatement
     Create a SELECT count(1) statement, use dict for WHERE.

SqlInsertStatement
     Create an INSERT INTO statement.

SqlRecordExists
     Tell if record exists in given table, matching criteria.

SqlSelectStatement
     Make and return a SQL SELECT statement.

SqlSetClause
     Derive a set clause for an update query, using a dict.

SqlUpdateStatement
     Create an UP2015.08.24 statement.

SqlWhereClause
     Create a WHERE clause using the values in dict.

SqliteColumnNameAndTypeList
     Return the names and types of the columns of some table.

SqliteColumnNameList
     Return a Tcl list with the names of the columns of a table.

SqliteColumnType
     Get the data type for the column in the table.

SqliteCopyTable
     Copy a table in a SQLite database.

SqliteRenameColumn
     Change name of a column in an SQLite table.

SqliteTableExists
     Determine if a table exists in the current database.

StartsAndEndsWith
     Check whether the string starts and ends with the value.

Ter
     Returns either first or second value.

UnlinkVarFromDbGlobal
     Stop making writes to the variable also write the database.

UnsetDbGlobal
     Unset / delete a variable in the globals table.
